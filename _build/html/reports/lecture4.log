Traceback (most recent call last):
  File "/usr/local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.8/3.8.5/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
knn.fit(X_train, y_train)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-48-144fd69ce732>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mknn[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX_train[0m[0;34m,[0m [0my_train[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/usr/local/lib/python3.8/site-packages/sklearn/neighbors/_regression.py[0m in [0;36mfit[0;34m(self, X, y)[0m
[1;32m    188[0m             [0mThe[0m [0mfitted[0m [0mk[0m[0;34m-[0m[0mnearest[0m [0mneighbors[0m [0mregressor[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    189[0m         """
[0;32m--> 190[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_fit[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    191[0m [0;34m[0m[0m
[1;32m    192[0m     [0;32mdef[0m [0mpredict[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mX[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/neighbors/_base.py[0m in [0;36m_fit[0;34m(self, X, y)[0m
[1;32m    361[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_get_tags[0m[0;34m([0m[0;34m)[0m[0;34m[[0m[0;34m"requires_y"[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    362[0m             [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mX[0m[0;34m,[0m [0;34m([0m[0mKDTree[0m[0;34m,[0m [0mBallTree[0m[0;34m,[0m [0mNeighborsBase[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 363[0;31m                 X, y = self._validate_data(X, y, accept_sparse="csr",
[0m[1;32m    364[0m                                            multi_output=True)
[1;32m    365[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/base.py[0m in [0;36m_validate_data[0;34m(self, X, y, reset, validate_separately, **check_params)[0m
[1;32m    431[0m                 [0my[0m [0;34m=[0m [0mcheck_array[0m[0;34m([0m[0my[0m[0;34m,[0m [0;34m**[0m[0mcheck_y_params[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    432[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 433[0;31m                 [0mX[0m[0;34m,[0m [0my[0m [0;34m=[0m [0mcheck_X_y[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0;34m**[0m[0mcheck_params[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    434[0m             [0mout[0m [0;34m=[0m [0mX[0m[0;34m,[0m [0my[0m[0;34m[0m[0;34m[0m[0m
[1;32m    435[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/utils/validation.py[0m in [0;36minner_f[0;34m(*args, **kwargs)[0m
[1;32m     61[0m             [0mextra_args[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0margs[0m[0;34m)[0m [0;34m-[0m [0mlen[0m[0;34m([0m[0mall_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     62[0m             [0;32mif[0m [0mextra_args[0m [0;34m<=[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 63[0;31m                 [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     64[0m [0;34m[0m[0m
[1;32m     65[0m             [0;31m# extra_args > 0[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m    812[0m         [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m"y cannot be None"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    813[0m [0;34m[0m[0m
[0;32m--> 814[0;31m     X = check_array(X, accept_sparse=accept_sparse,
[0m[1;32m    815[0m                     [0maccept_large_sparse[0m[0;34m=[0m[0maccept_large_sparse[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    816[0m                     [0mdtype[0m[0;34m=[0m[0mdtype[0m[0;34m,[0m [0morder[0m[0;34m=[0m[0morder[0m[0;34m,[0m [0mcopy[0m[0;34m=[0m[0mcopy[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/utils/validation.py[0m in [0;36minner_f[0;34m(*args, **kwargs)[0m
[1;32m     61[0m             [0mextra_args[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0margs[0m[0;34m)[0m [0;34m-[0m [0mlen[0m[0;34m([0m[0mall_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     62[0m             [0;32mif[0m [0mextra_args[0m [0;34m<=[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 63[0;31m                 [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     64[0m [0;34m[0m[0m
[1;32m     65[0m             [0;31m# extra_args > 0[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)[0m
[1;32m    661[0m [0;34m[0m[0m
[1;32m    662[0m         [0;32mif[0m [0mforce_all_finite[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 663[0;31m             _assert_all_finite(array,
[0m[1;32m    664[0m                                allow_nan=force_all_finite == 'allow-nan')
[1;32m    665[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.8/site-packages/sklearn/utils/validation.py[0m in [0;36m_assert_all_finite[0;34m(X, allow_nan, msg_dtype)[0m
[1;32m    101[0m                 not allow_nan and not np.isfinite(X).all()):
[1;32m    102[0m             [0mtype_err[0m [0;34m=[0m [0;34m'infinity'[0m [0;32mif[0m [0mallow_nan[0m [0;32melse[0m [0;34m'NaN, infinity'[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 103[0;31m             raise ValueError(
[0m[1;32m    104[0m                     [0mmsg_err[0m[0;34m.[0m[0mformat[0m[0;34m[0m[0;34m[0m[0m
[1;32m    105[0m                     (type_err,

[0;31mValueError[0m: Input contains NaN, infinity or a value too large for dtype('float64').
ValueError: Input contains NaN, infinity or a value too large for dtype('float64').

